import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { ChevronLeft, Menu, RefreshCw } from "lucide-react";
import { Link } from "react-router-dom";
import { motion } from "framer-motion";

const AdultContent = () => {
  const [selectedSite, setSelectedSite] = useState("pornhub");
  const [isLoading, setIsLoading] = useState(true);
  const iframeRef = useRef<HTMLIFrameElement>(null);
  
  const sites = [
    { id: "pornhub", name: "Pornhub", url: "https://www.pornhub.com" },
    { id: "xvideos", name: "XVideos", url: "https://www.xvideos.com" },
    { id: "xnxx", name: "XNXX", url: "https://www.xnxx.com" },
    { id: "redtube", name: "RedTube", url: "https://www.redtube.com" }
  ];
  
  const currentSite = sites.find(site => site.id === selectedSite);
  
  const handleSiteChange = (siteId: string) => {
    setIsLoading(true);
    setSelectedSite(siteId);
  };
  
  const handleRefresh = () => {
    setIsLoading(true);
    if (iframeRef.current) {
      iframeRef.current.src = currentSite?.url || "";
    }
  };
  
  const handleIframeLoad = () => {
    setIsLoading(false);
  };
  
  useEffect(() => {
    // Reset loading state if iframe loads
    const timeoutId = setTimeout(() => {
      setIsLoading(false);
    }, 5000);
    
    return () => clearTimeout(timeoutId);
  }, [selectedSite]);

  return (
    <div className="min-h-screen bg-zinc-50/50 backdrop-blur">
      {/* Fixed Header */}
      <header className="fixed top-0 left-0 right-0 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60 z-50 border-b border-zinc-200/50">
        <div className="container mx-auto px-4 h-14 flex items-center justify-between">
          <div className="flex items-center">
            <Link to="/">
              <Button variant="ghost" size="icon" className="mr-2 rounded-full">
                <ChevronLeft className="h-5 w-5" />
              </Button>
            </Link>
            <h1 className="text-xl font-semibold tracking-tight">Adult Content</h1>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button 
              variant="ghost" 
              size="icon" 
              className="rounded-full"
              onClick={handleRefresh}
            >
              <RefreshCw className="h-5 w-5" />
            </Button>
            
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="rounded-full">
                  <Menu className="h-5 w-5" />
                </Button>
              </SheetTrigger>
              <SheetContent>
                <div className="mt-8 space-y-4">
                  <h3 className="text-lg font-medium">Select Website</h3>
                  <div className="space-y-2">
                    {sites.map(site => (
                      <Button
                        key={site.id}
                        variant={selectedSite === site.id ? "default" : "outline"}
                        className="w-full rounded-full justify-start"
                        onClick={() => handleSiteChange(site.id)}
                      >
                        {site.name}
                      </Button>
                    ))}
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="pt-14 h-screen w-full overflow-hidden">
        <div className="relative h-full w-full">
          {isLoading && (
            <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-10">
              <div className="flex flex-col items-center">
                <div className="w-12 h-12 rounded-full border-4 border-zinc-200 border-t-zinc-800 animate-spin mb-4"></div>
                <p className="text-zinc-500 font-medium">Loading content...</p>
              </div>
            </div>
          )}
          
          <iframe
            ref={iframeRef}
            src={currentSite?.url}
            className="w-full h-full border-0"
            onLoad={handleIframeLoad}
            title="Adult Content"
            sandbox="allow-forms allow-scripts allow-same-origin allow-popups"
          />
        </div>
      </main>
      
      {/* Site Selector Bottom Sheet for Mobile */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 p-4 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-t border-zinc-200/50">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between overflow-x-auto pb-2 gap-2">
            {sites.map(site => (
              <motion.div
                key={site.id}
                whileTap={{ scale: 0.95 }}
              >
                <Button
                  variant={selectedSite === site.id ? "default" : "outline"}
                  className={`whitespace-nowrap px-4 rounded-full ${
                    selectedSite === site.id 
                      ? "bg-zinc-900 text-white" 
                      : "bg-white text-zinc-900"
                  }`}
                  onClick={() => handleSiteChange(site.id)}
                >
                  {site.name}
                </Button>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdultContent;